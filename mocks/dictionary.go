// Code generated by MockGen. DO NOT EDIT.
// Source: dictionary.go

// Package mock_mnemo is a generated GoMock package.
package mock_mnemo

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDictionary is a mock of Dictionary interface
type MockDictionary struct {
	ctrl     *gomock.Controller
	recorder *MockDictionaryMockRecorder
}

// MockDictionaryMockRecorder is the mock recorder for MockDictionary
type MockDictionaryMockRecorder struct {
	mock *MockDictionary
}

// NewMockDictionary creates a new mock instance
func NewMockDictionary(ctrl *gomock.Controller) *MockDictionary {
	mock := &MockDictionary{ctrl: ctrl}
	mock.recorder = &MockDictionaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDictionary) EXPECT() *MockDictionaryMockRecorder {
	return m.recorder
}

// Word mocks base method
func (m *MockDictionary) Word(index int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Word", index)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Word indicates an expected call of Word
func (mr *MockDictionaryMockRecorder) Word(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Word", reflect.TypeOf((*MockDictionary)(nil).Word), index)
}

// Separator mocks base method
func (m *MockDictionary) Separator() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Separator")
	ret0, _ := ret[0].(string)
	return ret0
}

// Separator indicates an expected call of Separator
func (mr *MockDictionaryMockRecorder) Separator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Separator", reflect.TypeOf((*MockDictionary)(nil).Separator))
}
